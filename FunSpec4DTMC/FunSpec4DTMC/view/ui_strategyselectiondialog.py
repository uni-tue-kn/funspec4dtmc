
#  Copyright (C) 2018 University of Tuebingen
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, version 3.
#
#  This program is distributed in the hope that it will be useful, but
#  WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
#  General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program. If not, see <http://www.gnu.org/licenses/>.

from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_StrategySelectionDialog(object):

    def setupUi(self, StrategySelectionDialog):
        StrategySelectionDialog.setObjectName("StrategySelectionDialog")
        StrategySelectionDialog.resize(1017, 984)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("../../../DTMC_Simulator/resources/icons/FS4DTMC.PNG"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        StrategySelectionDialog.setWindowIcon(icon)
        StrategySelectionDialog.setStyleSheet("")
        self.verticalLayout = QtWidgets.QVBoxLayout(StrategySelectionDialog)
        self.verticalLayout.setObjectName("verticalLayout")
        self.widget = QtWidgets.QWidget(StrategySelectionDialog)
        self.widget.setAutoFillBackground(False)
        self.widget.setStyleSheet("background-color: white")
        self.widget.setObjectName("widget")
        self.cb_strategy = QtWidgets.QComboBox(self.widget)
        self.cb_strategy.setGeometry(QtCore.QRect(650, 50, 271, 31))
        self.cb_strategy.setObjectName("cb_strategy")
        self.cb_strategy.addItem("")
        self.cb_strategy.addItem("")
        self.cb_strategy.addItem("")
        self.cb_strategy.addItem("")
        self.cb_strategy.addItem("")
        self.cb_strategy.addItem("")
        self.cb_strategy.addItem("")
        self.te_steps = QtWidgets.QTextEdit(self.widget)
        self.te_steps.setEnabled(False)
        self.te_steps.setGeometry(QtCore.QRect(840, 90, 81, 31))
        self.te_steps.setObjectName("te_steps")
        self.la_strategy = QtWidgets.QLabel(self.widget)
        self.la_strategy.setGeometry(QtCore.QRect(70, 40, 301, 41))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.la_strategy.setFont(font)
        self.la_strategy.setObjectName("la_strategy")
        self.cb_steps = QtWidgets.QCheckBox(self.widget)
        self.cb_steps.setGeometry(QtCore.QRect(170, 80, 161, 51))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.cb_steps.setFont(font)
        self.cb_steps.setChecked(False)
        self.cb_steps.setObjectName("cb_steps")
        self.cb_stStVectorPlot = QtWidgets.QCheckBox(self.widget)
        self.cb_stStVectorPlot.setGeometry(QtCore.QRect(170, 540, 461, 51))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.cb_stStVectorPlot.setFont(font)
        self.cb_stStVectorPlot.setObjectName("cb_stStVectorPlot")
        self.la_representationForms = QtWidgets.QLabel(self.widget)
        self.la_representationForms.setGeometry(QtCore.QRect(70, 260, 411, 51))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.la_representationForms.setFont(font)
        self.la_representationForms.setObjectName("la_representationForms")
        self.cb_cuStStVectorPlot = QtWidgets.QCheckBox(self.widget)
        self.cb_cuStStVectorPlot.setGeometry(QtCore.QRect(170, 610, 461, 51))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.cb_cuStStVectorPlot.setFont(font)
        self.cb_cuStStVectorPlot.setObjectName("cb_cuStStVectorPlot")
        self.cb_coCuStStVectorPlot = QtWidgets.QCheckBox(self.widget)
        self.cb_coCuStStVectorPlot.setGeometry(QtCore.QRect(170, 680, 761, 51))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.cb_coCuStStVectorPlot.setFont(font)
        self.cb_coCuStStVectorPlot.setObjectName("cb_coCuStStVectorPlot")
        self.cb_stStVector = QtWidgets.QCheckBox(self.widget)
        self.cb_stStVector.setGeometry(QtCore.QRect(170, 460, 461, 51))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.cb_stStVector.setFont(font)
        self.cb_stStVector.setObjectName("cb_stStVector")
        self.cb_alphaRelaxation = QtWidgets.QCheckBox(self.widget)
        self.cb_alphaRelaxation.setEnabled(True)
        self.cb_alphaRelaxation.setGeometry(QtCore.QRect(170, 180, 321, 51))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.cb_alphaRelaxation.setFont(font)
        self.cb_alphaRelaxation.setChecked(False)
        self.cb_alphaRelaxation.setObjectName("cb_alphaRelaxation")
        self.te_alphaRelaxation = QtWidgets.QTextEdit(self.widget)
        self.te_alphaRelaxation.setEnabled(False)
        self.te_alphaRelaxation.setGeometry(QtCore.QRect(840, 180, 81, 31))
        self.te_alphaRelaxation.setObjectName("te_alphaRelaxation")
        self.cb_stStVectorPlotSeparated = QtWidgets.QCheckBox(self.widget)
        self.cb_stStVectorPlotSeparated.setGeometry(QtCore.QRect(280, 590, 261, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.cb_stStVectorPlotSeparated.setFont(font)
        self.cb_stStVectorPlotSeparated.setChecked(False)
        self.cb_stStVectorPlotSeparated.setObjectName("cb_stStVectorPlotSeparated")
        self.cb_cuStStVectorPlotSeparated = QtWidgets.QCheckBox(self.widget)
        self.cb_cuStStVectorPlotSeparated.setGeometry(QtCore.QRect(280, 660, 261, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.cb_cuStStVectorPlotSeparated.setFont(font)
        self.cb_cuStStVectorPlotSeparated.setChecked(False)
        self.cb_cuStStVectorPlotSeparated.setObjectName("cb_cuStStVectorPlotSeparated")
        self.cb_coCuStStVectorPlotSeparated = QtWidgets.QCheckBox(self.widget)
        self.cb_coCuStStVectorPlotSeparated.setGeometry(QtCore.QRect(280, 730, 301, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.cb_coCuStStVectorPlotSeparated.setFont(font)
        self.cb_coCuStStVectorPlotSeparated.setChecked(False)
        self.cb_coCuStStVectorPlotSeparated.setObjectName("cb_coCuStStVectorPlotSeparated")
        self.cb_graph = QtWidgets.QCheckBox(self.widget)
        self.cb_graph.setGeometry(QtCore.QRect(170, 300, 461, 51))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.cb_graph.setFont(font)
        self.cb_graph.setObjectName("cb_graph")
        self.cb_markClosures = QtWidgets.QCheckBox(self.widget)
        self.cb_markClosures.setGeometry(QtCore.QRect(280, 390, 261, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.cb_markClosures.setFont(font)
        self.cb_markClosures.setChecked(False)
        self.cb_markClosures.setObjectName("cb_markClosures")
        self.cb_calculate_period = QtWidgets.QCheckBox(self.widget)
        self.cb_calculate_period.setGeometry(QtCore.QRect(170, 420, 461, 51))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.cb_calculate_period.setFont(font)
        self.cb_calculate_period.setObjectName("cb_calculate_period")
        self.cb_graphLayout = QtWidgets.QComboBox(self.widget)
        self.cb_graphLayout.setGeometry(QtCore.QRect(650, 350, 271, 31))
        self.cb_graphLayout.setObjectName("cb_graphLayout")
        self.cb_graphLayout.addItem("")
        self.cb_graphLayout.addItem("")
        self.cb_graphLayout.addItem("")
        self.cb_graphLayout.addItem("")
        self.la_graphLayout = QtWidgets.QLabel(self.widget)
        self.la_graphLayout.setGeometry(QtCore.QRect(310, 340, 111, 41))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.la_graphLayout.setFont(font)
        self.la_graphLayout.setObjectName("la_graphLayout")
        self.cb_evoStAv = QtWidgets.QCheckBox(self.widget)
        self.cb_evoStAv.setGeometry(QtCore.QRect(170, 780, 761, 51))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.cb_evoStAv.setFont(font)
        self.cb_evoStAv.setObjectName("cb_evoStAv")
        self.cb_randomWalk = QtWidgets.QCheckBox(self.widget)
        self.cb_randomWalk.setGeometry(QtCore.QRect(170, 730, 761, 51))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.cb_randomWalk.setFont(font)
        self.cb_randomWalk.setObjectName("cb_randomWalk")
        self.cb_evoSt = QtWidgets.QCheckBox(self.widget)
        self.cb_evoSt.setGeometry(QtCore.QRect(170, 830, 761, 51))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.cb_evoSt.setFont(font)
        self.cb_evoSt.setObjectName("cb_evoSt")
        self.la_startState = QtWidgets.QLabel(self.widget)
        self.la_startState.setGeometry(QtCore.QRect(200, 870, 101, 51))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.la_startState.setFont(font)
        self.la_startState.setObjectName("la_startState")
        self.le_startState = QtWidgets.QLineEdit(self.widget)
        self.le_startState.setGeometry(QtCore.QRect(840, 880, 81, 31))
        self.le_startState.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.le_startState.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.le_startState.setObjectName("le_startState")
        self.la_directScheme = QtWidgets.QLabel(self.widget)
        self.la_directScheme.setGeometry(QtCore.QRect(200, 220, 231, 51))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.la_directScheme.setFont(font)
        self.la_directScheme.setObjectName("la_directScheme")
        self.cb_directScheme = QtWidgets.QComboBox(self.widget)
        self.cb_directScheme.setGeometry(QtCore.QRect(650, 229, 271, 31))
        self.cb_directScheme.setObjectName("cb_directScheme")
        self.cb_directScheme.addItem("")
        self.cb_directScheme.addItem("")
        self.cb_transitionMatrix = QtWidgets.QCheckBox(self.widget)
        self.cb_transitionMatrix.setGeometry(QtCore.QRect(170, 730, 761, 51))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.cb_transitionMatrix.setFont(font)
        self.cb_transitionMatrix.setObjectName("cb_transitionMatrix")
        self.cb_saveSSD = QtWidgets.QCheckBox(self.widget)
        self.cb_saveSSD.setGeometry(QtCore.QRect(280, 510, 291, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.cb_saveSSD.setFont(font)
        self.cb_saveSSD.setChecked(False)
        self.cb_saveSSD.setObjectName("cb_saveSSD")
        self.cb_saveTM = QtWidgets.QCheckBox(self.widget)
        self.cb_saveTM.setGeometry(QtCore.QRect(280, 792, 291, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.cb_saveTM.setFont(font)
        self.cb_saveTM.setChecked(False)
        self.cb_saveTM.setObjectName("cb_saveTM")
        self.le_filePath_SSD = QtWidgets.QLineEdit(self.widget)
        self.le_filePath_SSD.setGeometry(QtCore.QRect(580, 510, 241, 31))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.le_filePath_SSD.setFont(font)
        self.le_filePath_SSD.setObjectName("le_filePath_SSD")
        self.bu_filePath_SSD = QtWidgets.QPushButton(self.widget)
        self.bu_filePath_SSD.setGeometry(QtCore.QRect(822, 508, 100, 33))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.bu_filePath_SSD.setFont(font)
        self.bu_filePath_SSD.setObjectName("bu_filePath_SSD")
        self.le_filePath_TM = QtWidgets.QLineEdit(self.widget)
        self.le_filePath_TM.setGeometry(QtCore.QRect(580, 792, 241, 31))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.le_filePath_TM.setFont(font)
        self.le_filePath_TM.setObjectName("le_filePath_TM")
        self.bu_filePath_TM = QtWidgets.QPushButton(self.widget)
        self.bu_filePath_TM.setGeometry(QtCore.QRect(822, 790, 100, 33))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.bu_filePath_TM.setFont(font)
        self.bu_filePath_TM.setObjectName("bu_filePath_TM")
        self.cb_period = QtWidgets.QCheckBox(self.widget)
        self.cb_period.setGeometry(QtCore.QRect(170, 130, 241, 51))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.cb_period.setFont(font)
        self.cb_period.setChecked(True)
        self.cb_period.setObjectName("cb_period")
        self.te_period = QtWidgets.QTextEdit(self.widget)
        self.te_period.setEnabled(False)
        self.te_period.setGeometry(QtCore.QRect(840, 135, 81, 31))
        self.te_period.setObjectName("te_period")
        self.verticalLayout.addWidget(self.widget)
        self.bb_acceptStrategy = QtWidgets.QDialogButtonBox(StrategySelectionDialog)
        self.bb_acceptStrategy.setOrientation(QtCore.Qt.Horizontal)
        self.bb_acceptStrategy.setStandardButtons(QtWidgets.QDialogButtonBox.Cancel|QtWidgets.QDialogButtonBox.Ok)
        self.bb_acceptStrategy.setObjectName("bb_acceptStrategy")
        self.verticalLayout.addWidget(self.bb_acceptStrategy)

        self.retranslateUi(StrategySelectionDialog)
        self.bb_acceptStrategy.accepted.connect(StrategySelectionDialog.accept)
        self.bb_acceptStrategy.rejected.connect(StrategySelectionDialog.reject)
        QtCore.QMetaObject.connectSlotsByName(StrategySelectionDialog)

    def retranslateUi(self, StrategySelectionDialog):
        _translate = QtCore.QCoreApplication.translate
        StrategySelectionDialog.setWindowTitle(_translate("StrategySelectionDialog", "Strategy Selection Dialog"))
        self.cb_strategy.setItemText(0, _translate("StrategySelectionDialog", "MCS - Random walk"))
        self.cb_strategy.setItemText(1, _translate("StrategySelectionDialog", "MCS - Limiting distribution"))
        self.cb_strategy.setItemText(2, _translate("StrategySelectionDialog", "MCS - Cesaro limit"))
        self.cb_strategy.setItemText(3, _translate("StrategySelectionDialog", "MCS - Modified cesaro limit"))
        self.cb_strategy.setItemText(4, _translate("StrategySelectionDialog", "MCS - Matrix powering"))
        self.cb_strategy.setItemText(5, _translate("StrategySelectionDialog", "MCS - Direct approach"))
        self.cb_strategy.setItemText(6, _translate("StrategySelectionDialog", "MCS - Forward approach"))
        self.te_steps.setHtml(_translate("StrategySelectionDialog", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:7.8pt; font-weight:400; font-style:normal;\">\n"
"<p align=\"right\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">100</p></body></html>"))
        self.la_strategy.setText(_translate("StrategySelectionDialog", "Choose appropriate strategy:"))
        self.cb_steps.setText(_translate("StrategySelectionDialog", "  Simulation steps:"))
        self.cb_stStVectorPlot.setText(_translate("StrategySelectionDialog", "  Plot the stationary state distribution"))
        self.la_representationForms.setText(_translate("StrategySelectionDialog", "Selected representation forms:"))
        self.cb_cuStStVectorPlot.setText(_translate("StrategySelectionDialog", "  Plot the cumulative stationary state distribution"))
        self.cb_coCuStStVectorPlot.setText(_translate("StrategySelectionDialog", "  Plot the complementary cumulative stationary state distribution"))
        self.cb_stStVector.setText(_translate("StrategySelectionDialog", "  Visualization of the stationary state distribution"))
        self.cb_alphaRelaxation.setText(_translate("StrategySelectionDialog", "  Alpha-relaxation parameter:"))
        self.te_alphaRelaxation.setHtml(_translate("StrategySelectionDialog", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:7.8pt; font-weight:400; font-style:normal;\">\n"
"<p align=\"right\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">1</p></body></html>"))
        self.cb_stStVectorPlotSeparated.setText(_translate("StrategySelectionDialog", "  Separated visualization"))
        self.cb_cuStStVectorPlotSeparated.setText(_translate("StrategySelectionDialog", "  Separated visualization"))
        self.cb_coCuStStVectorPlotSeparated.setText(_translate("StrategySelectionDialog", "  Separated visualization"))
        self.cb_graph.setText(_translate("StrategySelectionDialog", "  Visualize the graph of the Markov chain"))
        self.cb_markClosures.setText(_translate("StrategySelectionDialog", "  Mark closures"))
        self.cb_calculate_period.setText(_translate("StrategySelectionDialog", "  Calculate period"))
        self.cb_graphLayout.setItemText(0, _translate("StrategySelectionDialog", "Circular layout"))
        self.cb_graphLayout.setItemText(1, _translate("StrategySelectionDialog", "Spring layout"))
        self.cb_graphLayout.setItemText(2, _translate("StrategySelectionDialog", "Spectral layout"))
        self.cb_graphLayout.setItemText(3, _translate("StrategySelectionDialog", "Random layout"))
        self.la_graphLayout.setText(_translate("StrategySelectionDialog", "Graph layout:"))
        self.cb_evoStAv.setText(_translate("StrategySelectionDialog", "  Plot evolution of the state average"))
        self.cb_randomWalk.setText(_translate("StrategySelectionDialog", "  Plot random walk"))
        self.cb_evoSt.setText(_translate("StrategySelectionDialog", "  Evolution of state probabilities"))
        self.la_startState.setText(_translate("StrategySelectionDialog", "Start state:"))
        self.le_startState.setText(_translate("StrategySelectionDialog", "0"))
        self.la_directScheme.setText(_translate("StrategySelectionDialog", "Calculation scheme:"))
        self.cb_directScheme.setItemText(0, _translate("StrategySelectionDialog", "Gaussian scheme"))
        self.cb_directScheme.setItemText(1, _translate("StrategySelectionDialog", "Inverse iteration scheme"))
        self.cb_transitionMatrix.setText(_translate("StrategySelectionDialog", "  Visualize transition matrix"))
        self.cb_saveSSD.setText(_translate("StrategySelectionDialog", "  Save results in external directory"))
        self.cb_saveTM.setText(_translate("StrategySelectionDialog", "  Save results in external directory"))
        self.le_filePath_SSD.setText(_translate("StrategySelectionDialog", "C:/"))
        self.bu_filePath_SSD.setText(_translate("StrategySelectionDialog", "URL"))
        self.le_filePath_TM.setText(_translate("StrategySelectionDialog", "C:/"))
        self.bu_filePath_TM.setText(_translate("StrategySelectionDialog", "URL"))
        self.cb_period.setText(_translate("StrategySelectionDialog", "  Period of the Markov chain:"))
        self.te_period.setHtml(_translate("StrategySelectionDialog", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:7.8pt; font-weight:400; font-style:normal;\">\n"
"<p align=\"right\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">1</p></body></html>"))

